@startuml

class VoiceAssistant {
	listen()
}


class ChessEngine {
	ponder(Board, Color)
	ponderPosition(Board, Color, int, int)
}

ChessEngine <|.. UCIChessEngine

class Color <<enumeration>> {
	White
	Black
}

class ChessPieceKind <<enumeration>> {
	Pawn
	King
	Queen
	Bishop
	Knight
	Rook
}

class ChessPiece {

}

ChessPiece *-- "1" Color
ChessPiece *-- "1" ChessPieceKind


Board *-- "2..*" ChessPiece
Serializable <|.. Board

class Board {
	movePiece(int, int, int, int)
	clearPieces()
	getPiece(int, int)
}

class Game {
	halfTurn: Color
	turnNumber: unsigned int

	duration()
	save()
	queryAttackers(int, int)
	queryPiece(int, int)
	queryMaterial()
	forfeit(Color)
	undoMove()
}

Serializable <|.. Game

class GameSnapshot {
	save()
	getBoard()
	getTime()
	getHalfTurn()
}

Serializable <|.. GameSnapshot

class GameHistory {
	save()
	load()
	snapshotCount()
	getSnapshot(int)
}
Serializable <|.. GameHistory

Game *-- "1" GameHistory
GameHistory *-- "*" GameSnapshot

Game *-- "1" Board

Game <|-- TimedGame
Game <|-- CustomGame
TimedGame <|-- StandardGame
TimedGame <|-- BlitzGame

Session *-- "0..1" Game

Session *-- "1" VoiceAssistant
Session *-- "1" ChessEngine

class Session {
	receiveCommand()
	receiveVocalCommand()
	createNewGame()
	forfeitGame(Color)
	closeActiveGame()
}

class Player {

}

class Player <|-- EnginePlayer
class Player <|-- HumanPlayer

Game *-- "2" Player

class Serializable <<interface>> {
	serialize()
}

class MaterialCounter {
	countInstances(ChessPiece)
}

Game *-- "2" MaterialCounter

MaterialCounter *-- "*" ChessPiece



@enduml
