@startuml

class VoiceAssistant {
	+bool enabled()
	+bool isBusy()
	+void say(string)
	+List<string> getLastCommand()
	+bool promptSaveActiveGame()
	+void notifyGameLoaded()
}

class BoardPosition {
	-row: const int
	-file: const int

	int getRow()
	int getFile()
}

Move "1" *-- "2" BoardPosition

class Move {
	+BoardPosition startPosition()
	+BoardPosition endPosition()
}

class ChessEngine {
	+void open()
	+int getEngineProccessID()
	+void close()
	+void setCheckOption(string, bool)
	+void setSpinOption(string, int)
	+void setComboOption(string, string)
	+void setButtonOption(string)
	+void setStringOption(string, string)
	+List<string> options()
	+string rawUCICommand(string)
	+void setPosition(Board, List<Move>)
	+void startPondering(List<Move>)
	+void ponderHit()
	+Move stopPondering()
}

class Color <<enumeration>> {
	White
	Black
}

class ChessPieceKind <<enumeration>> {
	Pawn
	King
	Queen
	Bishop
	Knight
	Rook
}

class ChessPiece {
	+Color color()
	+ChessPieceKind kind()
}

ChessPiece "1" *-- "1" Color
ChessPiece "1" *-- "1" ChessPieceKind

Board "1" *-- "2..*" ChessPiece
Serializable <|.. Board

class Board {
	+void movePiece(int, int, int, int)
	+void clearPieces()
	+void applyMove(Move)
	+ChessPiece? getPiece(int, int)
}

class Game {
	-halfTurn: Color
	-turnNumber: unsigned int

	+int duration()
	+void save()
	+Game createNewGame()
	+void setPlayerSide()
	+void queryAttackers(int, int)
	+void queryPiece(int, int)
	+void queryMaterial()
	+void forfeit(Color)
	+void undoMove()
	+Board getBoard()
	+int getTime()
	+Color getHalfTurn()
	+int getTurnNumber()
	+Move lastMove()
	+void movePiece(Move)
	+void updateBoard()
	+void pause()
	+bool isPaused()
	+bool hasUnsavedChanges()
	+void saveAndClose()
	+void loadSavedGame()
}

ChessEngine "1" --> "1..*" Move : ponders

Serializable <|.. Game

class GameSnapshot {
	-halfTurn: Color
	-turnNumber: unsigned int

	+Game load()
	+void save(string)
	+Board getBoard()
	+int getTime()
	+Color getHalfTurn()
	+unsigned ing getTurnNumber()
}

GameSnapshot "1" *-- "1" Board

Serializable <|.. GameSnapshot

class GameHistory {
	+void save(string)
	+int snapshotCount()
	+GameSnapshot getSnapshot(int)
}

class TimedGame {
	+int initialSecondsBlack()
	+int initialSecondsWhite()
	+int incrementSecondsBlack()
	+int incrementSecondsWhite()
}

Serializable <|.. GameHistory

Game "1" *-- "1" GameHistory
GameHistory "1" *-- "*" GameSnapshot

Game "1" *-- "1" Board

Game <|-- TimedGame

Session "1" *-- "0..1" Game

Session "1" *-- "1" VoiceAssistant
Session "1" *-- "1" ChessEngine

class Session {
	+void receiveCommand()
	+void receiveVocalCommand()
	+void createNewGame()
	+void forfeitGame(Color)
	+void closeActiveGame()
	+bool hasActiveGame()
	+VoiceAssistant voiceAssistant()
	+void parseCommand()
	+void parseSide()
	+void pauseActiveGame()
	+Game loadGame()
	+List<Game> getSavedGames()
}

class Serializable <<interface>> {
	+string serialize()
}

class MaterialCounter {
	+int countInstances(ChessPiece)
	+int blackPoints()
	+int whitePoints()
}

Game "1" *-- "1" MaterialCounter

MaterialCounter "1" *-- "*" ChessPiece

@enduml
