@startuml

class VoiceAssistant {
	listen()
}

class BoardPosition {
	+row: const int
	+file: const int
}

Move "1" *-- "2" BoardPosition
Move "1" *-- "1" ChessPiece

class Move {
	+BoardPosition startPosition()
	+BoardPosition endPosition()
	+ChessPiece piece()
}


class ChessEngine {
	+void open()
	+int getEngineProccessID()
	+void close()
	+void setCheckOption(string, bool)
	+void setSpinOption(string, int)
	+void setComboOption(string, string)
	+void setButtonOption(string)
	+void setStringOption(string, string)
	+List<string> options()
	+string rawUCICommand(string)
	+void setPosition(Board, List<Move>)
	+void startPondering(List<Move>)
	+void ponderHit()
	+Move stopPondering()
}

class Color <<enumeration>> {
	White
	Black
}

class ChessPieceKind <<enumeration>> {
	Pawn
	King
	Queen
	Bishop
	Knight
	Rook
}

class ChessPiece {
	Color color()
	ChessPieceKind kind()
}

ChessPiece *-- "1" Color
ChessPiece *-- "1" ChessPieceKind


Board *-- "2..*" ChessPiece
Serializable <|.. Board

class Board {
	+void movePiece(int, int, int, int)
	+void clearPieces()
	+ChessPiece? getPiece(int, int)
}

class Game {
	-halfTurn: Color
	-turnNumber: unsigned int

	+int duration()
	+void save()
	+void queryAttackers(int, int)
	+void queryPiece(int, int)
	+void queryMaterial()
	+void forfeit(Color)
	+void undoMove()
	+Player whitePlayer()
	+Player blackPlayer()
	+Board getBoard()
	+int getTime()
	+Color getHalfTurn()
	+int getTurnNumber()
}

ChessEngine "1" --> "1..*" Move : ponders

Serializable <|.. Game

class GameSnapshot {
	void save()
	Board getBoard()
	int getTime()
	Color getHalfTurn()
}

Serializable <|.. GameSnapshot

class GameHistory {
	void save()
	Game load()
	int snapshotCount()
	GameSnapshot getSnapshot(int)
}

class TimedGame {
	int initialSecondsBlack()
	int initialSecondsWhite()
	int incrementSecondsBlack()
	int incrementSecondsWhite()
}

Serializable <|.. GameHistory

Game *-- "1" GameHistory
GameHistory *-- "*" GameSnapshot

Game *-- "1" Board

Game <|-- TimedGame
Game <|-- CustomGame
TimedGame <|-- StandardGame
TimedGame <|-- BlitzGame

Session *-- "0..1" Game

Session *-- "1" VoiceAssistant
Session *-- "1" ChessEngine

class Session {
	+void receiveCommand()
	+void receiveVocalCommand()
	+void createNewGame()
	+void forfeitGame(Color)
	+void closeActiveGame()
	+bool hasActiveGame()
}

class Serializable <<interface>> {
	serialize()
}

class MaterialCounter {
	int countInstances(ChessPiece)
	int blackPoints()
	int whitePoints()
}

Game *-- "2" MaterialCounter

MaterialCounter *-- "*" ChessPiece



@enduml
